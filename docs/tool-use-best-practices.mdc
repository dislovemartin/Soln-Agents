---
description: # Best Practices for High Accuracy Tool Calls Across LLM Providers  This guide consolidates best practices for implementing reliable and accurate tool/function calling across major LLM providers: Anthropic's Claude, Google's Gemini, and OpenAI's GPT models. While each provider has its own implementation details, there are common patterns and practices that can help achieve high accuracy tool calls regardless of the provider.
globs: 
---
## 1. Tool/Function Definition Best Practices

### Naming Conventions
- Use clear, descriptive names for tools/functions that indicate their purpose
- Avoid abbreviations, acronyms, or ambiguous names
- Use consistent naming patterns across related tools
- Keep names concise but meaningful

Example of good vs poor naming:
```javascript
// Good
{
    "name": "get_customer_order_status",
    "description": "..."
}

// Poor
{
    "name": "getCustOrdStat",
    "description": "..."  
}
```

### Comprehensive Descriptions
- Write detailed descriptions explaining what the tool does
- Specify when the tool should (and shouldn't) be used
- Include example scenarios for tool usage
- Describe expected inputs and outputs
- Keep descriptions focused and relevant

Example:
```javascript
{
    "name": "get_weather",
    "description": "Get the current weather conditions for a specific location. Use this tool when the user asks about current weather, temperature, or atmospheric conditions. This tool provides real-time data including temperature, humidity, and conditions like rain or sun. Do NOT use this for weather forecasts or historical weather data.",
    "parameters": {
        // ...
    }
}
```

### Parameter Design
- Use intuitive parameter names
- Provide detailed descriptions for each parameter
- Use enums/constraints when possible to limit valid values
- Make required vs optional parameters clear
- Include data type and format specifications
- Use consistent parameter patterns across related tools

Example:
```javascript
{
    "parameters": {
        "type": "object",
        "properties": {
            "location": {
                "type": "string",
                "description": "City and country/state (e.g., 'San Francisco, CA' or 'London, UK')"
            },
            "temperature_unit": {
                "type": "string",
                "enum": ["celsius", "fahrenheit"],
                "description": "Temperature measurement unit",
                "default": "celsius"
            }
        },
        "required": ["location"]
    }
}
```

## 2. Implementation Strategies

### Enable Strict Schema Validation 
- Use OpenAI's Structured Output with `strict: true`
- Use Anthropic's parallel tool use with clear schemas
- Implement input validation on your application side
- Handle validation errors gracefully

### Proper Error Handling
- Handle tool execution errors appropriately
- Return meaningful error messages to the model
- Allow the model to retry with corrected parameters
- Implement rate limiting and timeouts
- Log errors for debugging

Example:
```python
try:
    result = execute_tool(tool_name, parameters)
    return {
        "type": "tool_result",
        "tool_call_id": tool_call_id,
        "content": result
    }
except ToolExecutionError as e:
    return {
        "type": "tool_result",
        "tool_call_id": tool_call_id,
        "content": f"Error: {str(e)}",
        "is_error": True
    }
```

### Tool Response Format
- Return structured, consistent responses
- Include status indicators (success/failure)
- Provide context with results
- Keep responses concise but complete

## 3. System Design Considerations

### Tool Organization
- Limit the number of tools (ideally <20 for better accuracy)
- Group related tools logically
- Consider implementing tool categories/namespaces
- Break complex tools into simpler ones when possible

### Context Management
- Maintain conversation context effectively
- Include relevant system prompts
- Track tool call history
- Clean up stale context periodically

### Performance Optimization
- Cache frequently used tool results
- Implement parallel tool execution when possible
- Monitor token usage
- Optimize tool descriptions for token efficiency

## 4. Provider-Specific Optimizations

### Anthropic Claude
- Utilize detailed descriptions in tool definitions
- Enable parallel tool use for independent operations
- Consider chain-of-thought prompting
- Handle tool errors with retries

### Google Gemini
- Use function schemas effectively
- Implement proper type validation
- Handle parallel function calls appropriately
- Monitor response formats

### OpenAI GPT
- Enable Structured Outputs with `strict: true`
- Use tool choice parameters effectively
- Implement proper token management
- Consider fine-tuning for complex tool sets

## 5. Testing and Validation

### Comprehensive Testing
- Create test suites for tool calls
- Test edge cases and error scenarios
- Validate parameter handling
- Check response formats

### Evaluation Framework
- Set up accuracy metrics
- Monitor tool call success rates
- Track error patterns
- Implement A/B testing for improvements

Example test cases:
```python
def test_tool_calls():
    test_cases = [
        {
            "input": "What's the weather in London?",
            "expected_tool": "get_weather",
            "expected_params": {"location": "London, UK"}
        },
        # Add more test cases
    ]
    
    for case in test_cases:
        result = model.generate_tool_call(case["input"])
        assert_tool_call_matches(result, case["expected_tool"], case["expected_params"])
```

## 6. Continuous Improvement

### Monitoring and Analytics
- Track tool usage patterns
- Monitor error rates
- Analyze user interactions
- Identify improvement opportunities

### Documentation and Maintenance
- Keep tool documentation updated
- Document common issues and solutions
- Maintain version control for tool definitions
- Regular review and updates

### Performance Metrics
- Set up KPIs for tool accuracy
- Monitor response times
- Track error rates
- Measure user satisfaction

## Conclusion

Implementing high-accuracy tool calls requires careful attention to definition, implementation, and maintenance practices. By following these guidelines and adapting them to your specific use case and chosen LLM provider, you can achieve reliable and accurate tool execution in your AI applications.

Remember to:
1. Focus on clear, detailed tool definitions
2. Implement proper error handling and validation
3. Monitor and optimize performance
4. Test thoroughly and continuously improve
5. Consider provider-specific optimizations
6. Maintain good documentation and monitoring practices

By following these best practices, you can maximize the accuracy and reliability of tool calls across different LLM providers while maintaining maintainable and scalable implementations.